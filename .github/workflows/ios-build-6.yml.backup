name: Build Ren'Py iOS App

on: push

jobs:
  build:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Cache repository checkout
        id: cache-checkout
        uses: actions/cache@v3
        with:
          path: |
            .git
            .
          key: checkout-${{ github.sha }}-${{ runner.os }}
          restore-keys: |
            checkout-

      - name: Cache Ren'Py SDK
        id: cache-renpy
        uses: actions/cache@v3
        with:
          path: renpy
          key: renpy-8.3.7-${{ runner.os }}
          restore-keys: |
            renpy-8.3.7-

      - name: Download Ren'Py SDK
        if: steps.cache-renpy.outputs.cache-hit != 'true'
        run: |
          curl -o renpy-sdk.zip https://www.renpy.org/dl/8.3.7/renpy-8.3.7-sdk.zip
          unzip renpy-sdk.zip -d renpy

      - name: Download and install rapt
        if: steps.cache-renpy.outputs.cache-hit != 'true'
        run: |
          curl -o rapt.zip https://www.renpy.org/dl/8.3.7/renpy-8.3.7-rapt.zip
          unzip rapt.zip -d renpy/renpy-8.3.7-sdk

      - name: Download and install renios
        if: steps.cache-renpy.outputs.cache-hit != 'true'
        run: |
          curl -o renios.zip https://www.renpy.org/dl/8.3.7/renpy-8.3.7-renios.zip
          unzip renios.zip -d renpy/renpy-8.3.7-sdk

      - name: Download and install renpyweb
        if: steps.cache-renpy.outputs.cache-hit != 'true'
        run: |
          curl -o renpyweb.zip https://www.renpy.org/dl/8.3.7/renpy-8.3.7-web.zip
          unzip renpyweb.zip -d renpy/renpy-8.3.7-sdk

      - name: Build for iOS
        run: |
          cd renpy/renpy-8.3.7-sdk
          ./renpy.sh launcher ios_create "$GITHUB_WORKSPACE" "$GITHUB_WORKSPACE/ios"
          ./renpy.sh launcher ios_populate "$GITHUB_WORKSPACE" "$GITHUB_WORKSPACE/ios"
          # Debug: List contents of ios directory
          echo "Contents of $GITHUB_WORKSPACE/ios:"
          ls -la "$GITHUB_WORKSPACE/ios"

      - name: Check if iOS directory exists
        run: |
          if [ ! -d "$GITHUB_WORKSPACE/ios" ]; then
            echo "Error: iOS directory not found at $GITHUB_WORKSPACE/ios"
            exit 1
          fi

      - name: Find Xcode project
        run: |
          XCODEPROJ=$(find "$GITHUB_WORKSPACE/ios" -maxdepth 1 -name "*.xcodeproj" | head -n 1)
          if [ -z "$XCODEPROJ" ]; then
            echo "Error: No .xcodeproj file found in $GITHUB_WORKSPACE/ios"
            exit 1
          fi
          XCODEPROJ_NAME=$(basename "$XCODEPROJ")
          SCHEME_NAME="${XCODEPROJ_NAME%.xcodeproj}"
          echo "XCODEPROJ_PATH=$XCODEPROJ" >> $GITHUB_ENV
          echo "SCHEME_NAME=$SCHEME_NAME" >> $GITHUB_ENV
          echo "Found Xcode project: $XCODEPROJ_NAME with scheme: $SCHEME_NAME"

      - name: Set up signing certificate
        env:
          CERTIFICATE_P12: ${{ secrets.CERTIFICATE_P12 }}
          CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
        run: |
          echo "$CERTIFICATE_P12" | base64 --decode > certificate.p12
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security import certificate.p12 -k build.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain

      - name: Build Xcode project
        run: |
          cd "$GITHUB_WORKSPACE/ios"
          xcodebuild -project "${{ env.XCODEPROJ_PATH }}" \
            -scheme "${{ env.SCHEME_NAME }}" \
            -configuration Release \
            -sdk iphoneos \
            -allowProvisioningUpdates \
            CODE_SIGN_STYLE=Automatic \
            DEVELOPMENT_TEAM="${{ secrets.DEVELOPMENT_TEAM }}"
        env:
          DEVELOPMENT_TEAM: ${{ secrets.DEVELOPMENT_TEAM }}

      - name: Create application Bundle and convert to .ipa
        run: |
          cd "$GITHUB_WORKSPACE/ios"
          BUILD_SETTINGS=$(xcodebuild -project "${{ env.XCODEPROJ_PATH }}" -scheme "${{ env.SCHEME_NAME }}" -configuration Release -sdk iphoneos -showBuildSettings)
          BUILT_PRODUCTS_DIR=$(echo "$BUILD_SETTINGS" | grep BUILT_PRODUCTS_DIR | cut -d '=' -f2 | xargs)
          FULL_PRODUCT_NAME=$(echo "$BUILD_SETTINGS" | grep FULL_PRODUCT_NAME | cut -d '=' -f2 | xargs)
          APP_PATH="$BUILT_PRODUCTS_DIR/$FULL_PRODUCT_NAME"
          IPA_NAME="Cockham Superheros.ipa"
          if [ ! -d "$APP_PATH" ]; then
            echo "Error: .app bundle not found at $APP_PATH"
            exit 1
          fi
          mkdir -p "$GITHUB_WORKSPACE/temp/Payload"
          cp -R "$APP_PATH" "$GITHUB_WORKSPACE/temp/Payload/"
          cd "$GITHUB_WORKSPACE/temp"
          zip -r --symlinks "$IPA_NAME" Payload/
          echo "IPA_PATH=$GITHUB_WORKSPACE/temp/$IPA_NAME" >> $GITHUB_ENV

      - name: Create release and upload asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${{ github.ref_name }}" "${{ env.IPA_PATH }}" \
            --title "Release ${{ github.ref_name }}" \
            --notes "Automated release"